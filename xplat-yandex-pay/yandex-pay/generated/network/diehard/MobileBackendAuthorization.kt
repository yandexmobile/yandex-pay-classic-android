// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM network/diehard/mobile-backend-authorization.ts >>>

package com.yandex.xplat.yandex.pay

import com.yandex.xplat.common.*
import com.yandex.xplat.eventus.common.*

public open class MobileBackendInvalidAuthorizationError(message: String): ExternalConvertibleError(ExternalErrorKind.authorization, ExternalErrorTrigger.internal_sdk, null, null, message) {
    companion object {
        @JvmStatic private val ERROR_TAG: String = "Mobile backend invalid authorization error"
        @JvmStatic
        open fun tokenExchangeError(reason: String): MobileBackendInvalidAuthorizationError {
            return MobileBackendInvalidAuthorizationError("${this.ERROR_TAG}: Oauth token exchange failure - \"${reason}\"")
        }

        @JvmStatic
        open fun missingOauthError(): MobileBackendInvalidAuthorizationError {
            return MobileBackendInvalidAuthorizationError.missingFieldError("Oauth")
        }

        @JvmStatic
        open fun missingUidError(): MobileBackendInvalidAuthorizationError {
            return MobileBackendInvalidAuthorizationError.missingFieldError("Uid")
        }

        @JvmStatic
        private fun missingFieldError(fieldName: String): MobileBackendInvalidAuthorizationError {
            return MobileBackendInvalidAuthorizationError("${this.ERROR_TAG}: \"${fieldName}\" field is missing. Please, make sure that both \"Oauth\" & \"Uid\" values are provided.")
        }

    }
}

public open class MobileBackendAuthorization(val oauthToken: String, val uid: String) {
    companion object {
        @JvmStatic
        open fun fromAuthorizationPair(oauthToken: String?, uid: String?): Result<MobileBackendAuthorization?> {
            val missingOauth = isStringNullOrEmpty(oauthToken)
            val missingUid = isStringNullOrEmpty(uid)
            if (missingOauth && missingUid) {
                return resultValue<MobileBackendAuthorization?>(null)
            } else if (missingOauth && !missingUid) {
                val error = MobileBackendInvalidAuthorizationError.missingOauthError()
                Log.error(error.message)
                return resultError<MobileBackendAuthorization?>(error)
            } else if (!missingOauth && missingUid) {
                val error = MobileBackendInvalidAuthorizationError.missingUidError()
                Log.error(error.message)
                return resultError<MobileBackendAuthorization?>(error)
            } else {
                return resultValue<MobileBackendAuthorization?>(MobileBackendAuthorization(oauthToken!!, uid!!))
            }
        }

    }
}

