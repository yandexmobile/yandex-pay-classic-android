// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM network/yandex-pay-backend/register-push-token-request.ts >>>

package com.yandex.xplat.yandex.pay

import com.yandex.xplat.common.*
import com.yandex.xplat.eventus.common.*

public open class RegisterPushTokenRequest(val appId: String, val appVersion: String, val hardwareId: String, val pushToken: String, val pushTokenType: PushTokenType, val platform: PlatformType, val deviceName: String, val zoneId: String, val installId: String, val deviceId: String): BaseNetworkRequest() {
    open override fun method(): NetworkMethod {
        return NetworkMethod.post
    }

    open override fun targetPath(): String {
        return "api/mobile/v1/wallet/app/register_push_token"
    }

    open override fun encoding(): RequestEncoding {
        return JsonRequestEncoding()
    }

    open override fun params(): NetworkParams {
        var platform = "unknown"
        when (this.platform) {
            PlatformType.android -> {
                platform = "android"
            }
            PlatformType.ios -> {
                platform = "ios"
            }
            else -> {
            }
        }
        val result = super.params().putString("app_id", this.appId).putString("app_version", this.appVersion).putString("hardware_id", this.hardwareId).putString("push_token", this.pushToken).putString("platform", platform).putString("device_name", this.deviceName).putString("zone_id", this.zoneId).putBoolean("notify_disabled", false).putBoolean("active", true).putString("install_id", this.installId).putString("device_id", this.deviceId).putString("vendor_device_id", this.deviceId)
        when (this.pushTokenType) {
            PushTokenType.firebase -> {
            }
            PushTokenType.huawei -> {
                result.putBoolean("is_huawei", true)
            }
        }
        return result
    }

}

