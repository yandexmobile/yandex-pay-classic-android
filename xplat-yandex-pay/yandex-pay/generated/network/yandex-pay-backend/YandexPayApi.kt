// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM network/yandex-pay-backend/yandex-pay-api.ts >>>

package com.yandex.xplat.yandex.pay

import com.yandex.xplat.common.*
import com.yandex.xplat.eventus.common.*

public open class YandexPayApi(private val network: Network, private val responseProcessor: ResponseProcessor) {
    open fun checkout(request: PayCheckoutRequest): XPromise<PayCheckoutResponse> {
        return YandexPayAnalytics.events.payCheckout().traceExecution(this.network.executeRaw(request).flatThen( {
            response ->
            this.responseProcessor.extractResponse("Checkout", response,  {
                json ->
                PayCheckoutResponse.fromJSONItem(json)
            })
        }))
    }

    open fun setDefaultCard(request: SetDefaultCardRequest): XPromise<SetDefaultCardResponse> {
        return YandexPayAnalytics.events.setDefaultCard().traceExecution(this.network.executeRaw(request).flatThen( {
            response ->
            this.responseProcessor.extractResponse("SetDefaultCard", response,  {
                json ->
                SetDefaultCardResponse.fromJSONItem(json)
            })
        }))
    }

    open fun validate(request: ValidateRequest): XPromise<ValidateResponse> {
        return YandexPayAnalytics.events.validate().traceExecution(this.network.executeRaw(request).flatThen( {
            response ->
            this.responseProcessor.extractResponse("Validate", response,  {
                json ->
                ValidateResponse.fromJSONItem(json)
            })
        }))
    }

    open fun userCards(request: UserCardsRequest): XPromise<UserCardsResponse> {
        return YandexPayAnalytics.events.userCards().traceExecution(this.network.executeRaw(request).flatThen( {
            response ->
            this.responseProcessor.extractResponse("UserCards", response,  {
                json ->
                UserCardsResponse.fromJSONItem(json)
            })
        }))
    }

    open fun isReadyToPay(request: IsReadyToPayRequest): XPromise<IsReadyToPayResponse> {
        return YandexPayAnalytics.events.isReadyToPay().traceExecution(this.network.executeRaw(request).flatThen( {
            response ->
            this.responseProcessor.extractResponse("IsReadyToPay", response,  {
                json ->
                IsReadyToPayResponse.fromJSONItem(json)
            })
        }))
    }

    open fun loadUserProfile(request: UserProfileRequest): XPromise<UserProfileResponse> {
        return YandexPayAnalytics.events.loadUserProfile().traceExecution(this.network.executeRaw(request).flatThen( {
            response ->
            this.responseProcessor.extractResponse("UserProfile", response,  {
                json ->
                UserProfileResponse.fromJSONItem(json)
            })
        }))
    }

    open fun syncUserCard(request: SyncUserCardRequest): XPromise<SyncUserCardResponse> {
        return YandexPayAnalytics.events.syncUserCard().traceExecution(this.network.executeRaw(request).flatThen( {
            response ->
            this.responseProcessor.extractResponse("SyncUserCard", response,  {
                json ->
                SyncUserCardResponse.fromJSONItem(json)
            })
        }))
    }

    open fun encryptedAppId(request: EncryptedAppIdRequest): XPromise<EncryptedAppIdResponse> {
        return YandexPayAnalytics.events.encryptedAppId().traceExecution(this.network.executeRaw(request).flatThen( {
            response ->
            this.responseProcessor.extractResponse("EncryptedAppId", response,  {
                json ->
                EncryptedAppIdResponse.fromJSONItem(json)
            })
        }))
    }

    open fun bankLogos(request: BankLogosRequest): XPromise<BankLogosResponse> {
        return YandexPayAnalytics.events.bankLogos().traceExecution(this.network.executeRaw(request).flatThen( {
            response ->
            this.responseProcessor.extractUnvalidatedResponse("BankLogos", response,  {
                json ->
                BankLogosResponse.fromJSONItem(json)
            })
        }))
    }

    open fun getAllowedBins(request: GetAllowedBinsRequest): XPromise<GetAllowedBinsResponse> {
        return YandexPayAnalytics.events.getAllowedBins().traceExecution(this.network.executeRaw(request).flatThen( {
            response ->
            this.responseProcessor.extractResponse("GetAllowedBins", response,  {
                json ->
                GetAllowedBinsResponse.fromJSONItem(json)
            })
        }))
    }

    open fun registerPushToken(request: RegisterPushTokenRequest): XPromise<RegisterPushTokenResponse> {
        return YandexPayAnalytics.events.registerPushToken().traceExecution(this.network.executeRaw(request).flatThen( {
            response ->
            this.responseProcessor.extractResponse("RegisterPushToken", response,  {
                json ->
                RegisterPushTokenResponse.fromJSONItem(json)
            })
        }))
    }

    open fun isAuthorized(request: IsAuthorizedRequest): XPromise<IsAuthorizedResponse> {
        return YandexPayAnalytics.events.isAuthorized().traceExecution(this.network.executeRaw(request).flatThen( {
            response ->
            this.responseProcessor.extractResponse("IsAuthorized", response,  {
                json ->
                IsAuthorizedResponse.fromJSONItem(json)
            })
        }))
    }

    open fun initInstallReward(request: InitInstallRewardRequest): XPromise<InitInstallRewardResponse> {
        return YandexPayAnalytics.events.initInstallReward().traceExecution(this.network.executeRaw(request).flatThen( {
            response ->
            this.responseProcessor.extractResponse("InitInstallReward", response,  {
                json ->
                InitInstallRewardResponse.fromJSONItem(json)
            })
        }))
    }

    open fun getInstallReward(request: GetInstallRewardRequest): XPromise<GetInstallRewardResponse> {
        return YandexPayAnalytics.events.getInstallReward().traceExecution(this.network.executeRaw(request).flatThen( {
            response ->
            this.responseProcessor.extractResponse("GetInstallReward", response,  {
                json ->
                GetInstallRewardResponse.fromJSONItem(json)
            })
        }))
    }

}

