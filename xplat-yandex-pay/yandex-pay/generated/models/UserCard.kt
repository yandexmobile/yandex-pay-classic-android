// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM models/user-card.ts >>>

package com.yandex.xplat.yandex.pay

import com.yandex.xplat.common.*
import com.yandex.xplat.eventus.common.*

public open class UserCard(val id: String, val trustCardId: String?, val allowedAuthMethods: YSArray<AuthMethods>, val issuerBank: String, val uid: Int, val cardNetwork: CardNetworks, val last4Digits: String, val cardArt: CardArt, val bin: String) {
    companion object {
        @JvmStatic
        open fun fromJSONItem(json: JSONItem): Result<UserCard> {
            return decodeJSONItem(json, __LBL__UserCard_1@ {
                json ->
                val map = json.tryCastAsMapJSONItem()
                val id = map.tryGetString("id")
                val trustCardId = map.getString("trust_card_id")
                val uid = map.tryGetInt32("uid")
                val last4Digits = map.tryGetString("last4")
                val cardNetwork = UserCard.parseCardNetwork(map)
                val cardArt = UserCard.parseCardArt(map)
                val issuerBank = map.tryGetString("issuer_bank")
                val allowedAuthMethodsObject = map.tryGet("allowed_auth_methods").tryCastAsArrayJSONItem().asArray()
                val allowedAuthMethods = Collections.mapNotNull(allowedAuthMethodsObject,  {
                    item ->
                    authMethodFromString(item.castAsStringJSONItem()!!.value)
                })
                val bin = map.tryGetString("bin")
                return@__LBL__UserCard_1 UserCard(id, trustCardId, allowedAuthMethods, issuerBank, uid, cardNetwork, last4Digits, cardArt, bin)
            })
        }

        @JvmStatic
        private fun parseCardNetwork(json: MapJSONItem): CardNetworks {
            val cardNetwork = json.tryGetString("card_network")
            return cardNetworkFromString(cardNetwork)!!
        }

        @JvmStatic
        private fun parseCardArt(json: MapJSONItem): CardArt {
            val cartArtMap = json.tryGet("card_art").tryCastAsMapJSONItem()
            val picturesObject = undefinedToNull(cartArtMap.`get`("pictures"))
            val cardArtObject = if (picturesObject != null) picturesObject!!.tryCastAsMapJSONItem() else null
            return (if (cardArtObject != null) CardArt.fromJSONItem(cardArtObject!!) else null) ?: CardArt(mutableMapOf())
        }

    }
}

