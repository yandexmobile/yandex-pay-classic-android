// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM busilogics/card-types.ts >>>

package com.yandex.xplat.yandex.pay

import com.yandex.xplat.common.*
import com.yandex.xplat.eventus.common.*

public open class CardNetworkNumberPattern(val intervalStart: String, val intervalEnd: String?) {
}

public open class CardType(val cardNetwork: CardNetworks?, val patterns: YSArray<CardNetworkNumberPattern>, val validLengths: YSArray<Int>, val cvvLength: Int, val spacers: YSArray<Int>) {
    companion object {
        @JvmStatic val SPACERS_4_6: YSArray<Int> = mutableListOf(4, 10)
        @JvmStatic val REGULAR_SPACERS: YSArray<Int> = mutableListOf(4, 8, 12)
        @JvmStatic val UNKNOWN: CardType = CardType(null, mutableListOf<CardNetworkNumberPattern>(), mutableListOf(12, 13, 14, 15, 16, 17, 18, 19), 3, CardType.REGULAR_SPACERS)
        @JvmStatic
        open fun getAllCardTypes(): YSArray<CardType> {
            return mutableListOf(CardNetworks.amex, CardNetworks.discover, CardNetworks.jcb, CardNetworks.maestro, CardNetworks.masterCard, CardNetworks.mir, CardNetworks.unionPay, CardNetworks.uzCard, CardNetworks.visa, CardNetworks.visaElectron).map( {
                system ->
                CardType.cardTypeByNetwork(system)
            })
        }

        @JvmStatic
        open fun cardTypeFromCardNumber(numStr: String): CardType {
            val cardNetwork = CardNetworkChecker.instance.lookup(numStr)
            return CardType.cardTypeByNetwork(cardNetwork)
        }

        @JvmStatic
        open fun cardTypeByNetwork(cardNetwork: CardNetworks?): CardType {
            if (cardNetwork == null) {
                return CardType.UNKNOWN
            }
            when (cardNetwork!!) {
                CardNetworks.amex -> {
                    return CardType(CardNetworks.amex, mutableListOf(CardNetworkNumberPattern("34", null), CardNetworkNumberPattern("37", null)), mutableListOf(15), 4, CardType.SPACERS_4_6)
                }
                CardNetworks.discover -> {
                    return CardType(CardNetworks.discover, mutableListOf(CardNetworkNumberPattern("6011", null), CardNetworkNumberPattern("622126", "622925"), CardNetworkNumberPattern("644", "649"), CardNetworkNumberPattern("65", null)), mutableListOf(16), 3, CardType.REGULAR_SPACERS)
                }
                CardNetworks.jcb -> {
                    return CardType(CardNetworks.jcb, mutableListOf(CardNetworkNumberPattern("3528", "3589")), mutableListOf(16), 3, CardType.REGULAR_SPACERS)
                }
                CardNetworks.maestro -> {
                    return CardType(CardNetworks.maestro, mutableListOf(CardNetworkNumberPattern("50", null), CardNetworkNumberPattern("56", "59"), CardNetworkNumberPattern("61", null), CardNetworkNumberPattern("63", null), CardNetworkNumberPattern("66", "69")), mutableListOf(12, 13, 14, 15, 16, 17, 18, 19), 3, CardType.REGULAR_SPACERS)
                }
                CardNetworks.masterCard -> {
                    return CardType(CardNetworks.masterCard, mutableListOf(CardNetworkNumberPattern("222100", "272099"), CardNetworkNumberPattern("51", "55")), mutableListOf(16), 3, CardType.REGULAR_SPACERS)
                }
                CardNetworks.mir -> {
                    return CardType(CardNetworks.mir, mutableListOf(CardNetworkNumberPattern("2200", "2204")), mutableListOf(16, 17, 18, 19), 3, CardType.REGULAR_SPACERS)
                }
                CardNetworks.unionPay -> {
                    return CardType(CardNetworks.unionPay, mutableListOf(CardNetworkNumberPattern("35", null), CardNetworkNumberPattern("62", null), CardNetworkNumberPattern("88", null)), mutableListOf(16, 17, 18, 19), 3, CardType.REGULAR_SPACERS)
                }
                CardNetworks.uzCard -> {
                    return CardType(CardNetworks.uzCard, mutableListOf(CardNetworkNumberPattern("860002", "860006"), CardNetworkNumberPattern("860008", "860009"), CardNetworkNumberPattern("860011", "860014"), CardNetworkNumberPattern("860020", null), CardNetworkNumberPattern("860030", "860031"), CardNetworkNumberPattern("860033", "860034"), CardNetworkNumberPattern("860038", null), CardNetworkNumberPattern("860043", null), CardNetworkNumberPattern("860048", "860051"), CardNetworkNumberPattern("860053", null), CardNetworkNumberPattern("860055", "860060")), mutableListOf(16), 3, CardType.REGULAR_SPACERS)
                }
                CardNetworks.visa -> {
                    return CardType(CardNetworks.visa, mutableListOf(CardNetworkNumberPattern("4", null)), mutableListOf(13, 16, 18, 19), 3, CardType.REGULAR_SPACERS)
                }
                CardNetworks.visaElectron -> {
                    return CardType(CardNetworks.visaElectron, mutableListOf(CardNetworkNumberPattern("4026", null), CardNetworkNumberPattern("417500", null), CardNetworkNumberPattern("4405", null), CardNetworkNumberPattern("4508", null), CardNetworkNumberPattern("4844", null), CardNetworkNumberPattern("4913", null), CardNetworkNumberPattern("4917", null)), mutableListOf(16), 3, CardType.REGULAR_SPACERS)
                }
            }
        }

    }
}

public open class CardNetworkChecker() {
    open fun lookup(numStr: String): CardNetworks? {
        val cleanNumber = stringReplaceAll(numStr, " ", "")
        if (cleanNumber.length == 0) {
            return null
        }
        if (stringToInt64(cleanNumber) == null) {
            return null
        }
        val possibleCardNetworks: YSArray<CardNetworks> = mutableListOf()
        CardType.getAllCardTypes().forEach(__LBL__CardTypes_1@ {
            cardType ->
            cardType.patterns.forEach(__LBL__CardTypes_2@ {
                pattern ->
                val isPossibleCard = this.isNumberInInterval(cleanNumber, pattern.intervalStart, pattern.intervalEnd ?: pattern.intervalStart)
                if (isPossibleCard) {
                    possibleCardNetworks.add(cardType.cardNetwork!!)
                }
            })
        })
        return if (possibleCardNetworks.size == 1) possibleCardNetworks[0] else null
    }

    private fun isNumberInInterval(number: String, intervalStart: String, intervalEnd: String): Boolean {
        val intervalStartNumberLength: Int = minInt32(number.length, intervalStart.length)
        val intervalEndNumberLength: Int = minInt32(number.length, intervalEnd.length)
        var originalNumberPartToCompare: Long = stringToInt64(number.substring(0, intervalStartNumberLength))!!
        var intervalNumberPartToCompare: Long = stringToInt64(intervalStart.substring(0, intervalStartNumberLength))!!
        if (originalNumberPartToCompare < intervalNumberPartToCompare) {
            return false
        }
        originalNumberPartToCompare = stringToInt64(number.substring(0, intervalEndNumberLength))!!
        intervalNumberPartToCompare = stringToInt64(intervalEnd.substring(0, intervalEndNumberLength))!!
        if (originalNumberPartToCompare > intervalNumberPartToCompare) {
            return false
        }
        return true
    }

    companion object {
        @JvmStatic var instance: CardNetworkChecker = CardNetworkChecker()
    }
}

public fun applySpacers(str: String, spacers: YSArray<Int>): String {
    var result: String = str
    var numberOfSpacesApplied: Int = 0
    for (spacer in spacers) {
        val insertIndex = spacer + numberOfSpacesApplied
        if (insertIndex < result.length) {
            val prefix = result.substring(0, insertIndex)
            val suffix = result.substring(insertIndex, result.length)
            result = prefix + " " + suffix
            numberOfSpacesApplied += 1
        }
    }
    return result
}

