// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM network/form-body.ts >>>

package com.yandex.xplat.common


public open class FormBody(private val encodedNamesAndValues: YSArray<YSPair<String, String>>) {
    open fun size(): Int {
        return this.encodedNamesAndValues.size
    }

    open fun encodedName(index: Int): String {
        return this.encodedNamesAndValues[index].first
    }

    open fun name(index: Int): String {
        return percentDecode(this.encodedName(index), true)
    }

    open fun encodedValue(index: Int): String {
        return this.encodedNamesAndValues[index].second
    }

    open fun value(index: Int): String {
        return percentDecode(this.encodedValue(index), true)
    }

    open fun getValue(name: String): String? {
        for (idx in (0 until this.size() step 1)) {
            if (this.name(idx) == name) {
                return this.value(idx)
            }
        }
        return null
    }

    open fun tryGetValue(name: String): String {
        val value = this.getValue(name)
        if (value == null) {
            throw YSError("Failed to query form body for key \"${name}\", body: \"${this.encode()}\"")
        }
        return value!!
    }

    open fun encode(): String {
        return this.encodedNamesAndValues.map( {
            pair ->
            "${pair.first}=${pair.second}"
        }).joinToString("&")
    }

    open fun builder(): FormBodyBuilder {
        val builder = FormBodyBuilder()
        for (pair in this.encodedNamesAndValues) {
            builder.addEncoded(pair.first, pair.second)
        }
        return builder
    }

    companion object {
        @JvmStatic
        open fun build(): FormBodyBuilder {
            return FormBodyBuilder()
        }

        @JvmStatic
        open fun parse(value: String): FormBody {
            val builder = FormBody.build()
            val pairs = value.split("&")
            for (pair in pairs) {
                val idx = pair.indexOf("=")
                if (idx == -1) {
                    builder.addEncoded(pair, "")
                } else {
                    val name = pair.substring(0, idx)
                    val value = pair.substring(idx + 1)
                    builder.addEncoded(name, value)
                }
            }
            return builder.build()
        }

    }
}

public open class FormBodyBuilder() {
    private val encodedNamesAndValues: YSArray<YSPair<String, String>> = mutableListOf()
    open fun add(name: String, value: String): FormBodyBuilder {
        return this.addEncoded(percentEncode(name, true), percentEncode(value, true))
    }

    open fun addEncoded(name: String, value: String): FormBodyBuilder {
        val nameAndValue = YSPair<String, String>(name, value)
        this.encodedNamesAndValues.add(nameAndValue)
        return this
    }

    open fun build(): FormBody {
        return FormBody(this.encodedNamesAndValues)
    }

}

