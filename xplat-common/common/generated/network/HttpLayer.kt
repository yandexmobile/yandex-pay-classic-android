// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM network/http-layer.ts >>>

package com.yandex.xplat.common


public open class HttpRequest(val method: String, val url: String, val headers: YSMap<String, String>, val body: ArrayBuffer) {
}

public open class HttpResponse(val code: Int, val headers: YSMap<String, String>, val body: ArrayBuffer) {
}

public open class HttpResponseBuilder {
    private var code: Int = 200
    private var headers: YSMap<String, String> = mutableMapOf<String, String>()
    private var body: ArrayBuffer = ArrayBuffer(0)
    open fun setCode(code: Int): HttpResponseBuilder {
        this.code = code
        return this
    }

    open fun setHeaders(headers: YSMap<String, String>): HttpResponseBuilder {
        this.headers = headers
        return this
    }

    open fun setBody(body: ArrayBuffer): HttpResponseBuilder {
        this.body = body
        return this
    }

    open fun setBodyText(bodyText: String): HttpResponseBuilder {
        val buffer = ArrayBufferHelpers.arrayBufferFromString(bodyText, Encoding.Utf8)
        if (buffer.isError()) {
            return this
        }
        this.body = buffer.getValue()
        return this
    }

    open fun build(): HttpResponse {
        return HttpResponse(this.code, this.headers, this.body)
    }

}

public interface HttpRequestExecutor {
    fun executeRequest(request: HttpRequest): XPromise<HttpResponse>
}

public interface HttpRequestHandler {
    fun handleRequest(request: HttpRequest): HttpResponse
}

